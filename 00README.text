This repository contains a command-line based Oberon system.  The
compiler produces code for a virtual CPU, and there is an interpreter
that executes the instructions of the virtual CPU.  It is a work in
progress.

At the time of this writing, it's not suitable for running the Oberon
system, notably because there is no way to have any input other than
files.  It's also probably not yet quite fast enough to run the Oberon
System at a reasonable resolution.

Usage:

  o Prerequisites

    To build the software and documentation, you will need the
    following items:

    + The disassembler and loader / interpreter need Gnu G++.

    + To run the script that creates cscope files, cscope must be
      installed.

          sudo apt install cscope

      cscope is a code indexing and searching system that integrates
      with editors or can be used standalone.  It allows finding
      symbols in the C source code very easily.

      If you do not use cscope to find symbols in C code, you do not
      need to install this.

    + The documentation requires a modern LaTeX installation, with a
      few extra packages.

      On Ubuntu and Raspbian the following should be sufficient:

          sudo apt install            \
            texlive-latex-base        \
            texlive-latex-extra       \
            texlive-science


  o Configure shell environment.

    There is a set of Bash shell commands that allow easy invocation
    of different parts of the system.  These shell commands simplify
    the effort necessary to run the compiler or execute the
    interpreter to run Oberon code you have written and compiled.

    The commands are loaded into the current shell environment by
    'source'-ing the file, using something the following template as a
    guide.  An example follows.

      cd <place where the software was cloned>
      source ./scripts/setup \
         -a (Intel-x86-64 | Arm64) \
         -b (alpha | beta | release) \
         -o <location for build output>

      + The '-a' option specifies the target architecture.

        If not specified, the default value of 'Intel-x86-64' will be
        used.

      + The '-b' option specifies the build type.

        If not specified, the default value of 'alpha' will be used.

        An 'alpha' build has all runtime checking turned on, and allows
        all capabilities such as tracing the program execution on an
        instruction level.

        A 'release' build disables runtime checking and features that
        probably are not useful for non-developers.

        A 'release' build runs appreciably faster than an 'alpha' build.

        A 'beta' build has performance between 'alpha' and 'release'.


    Example:

      cd <place where the software was cloned>
      source ./scripts/setup \
        -a Intel-x86-64      \
        -b release           \
        -o /tmp/oberon

      SKL_DIR          : '/nas/homes/thutt/skl/skl-o2'
      SKL_ARCHITECTURE : 'Intel-x86-64'
      SKL_BUILD_TYPE   : 'release'
      SKL_BUILD_OPTIONS: ''
      SKL_BUILD_DIR    : '/tmp/skl/skl-o2'
      SKL_SEARCH_PATH  : '/nas/homes/thutt/skl/skl-o2/system'


    SKL_DIR is used by the shell functions, and is the root of the
    source tree.

    SKL_BUILD_TYPE is the type of build that will be produced.

    SKL_BUILD_OPTIONS holds the build options that are enabled.  These
    options are enabled and disabled with:

        build-option-enable <option>
        build-option-disable <option>

      To see the valid options:

         echo ${SKL_BUILD_OPTIONS_VALID[*]}

      The current options are:

         profile: Enable gprof profiling
                  (see skl-gprof function in ${SKL_DIR}/scripts/functions)
         trace  : Enable instruction-level tracing.


   o Show current environment configuration

     oberon-show-config

     This prints out the environment configuration; the same as
     printed after loading the 'setup' file.


   o Build everything:

     cd ${SKL_DIR}
     skl-build [-j <number of processors>]

     This will build the 'disassembler', 'loader' / 'interpreter' and
     virtual CPU reference.

     + Read the virtual CPU reference:

       xpdf ${SKL_BUILD_DIR}/${SKL_BUILD_TYPE}/doc/skl/skl.pdf

     + Disassemble a module:

       disasm ${SKL_DIR}/system/Kernel.Obj

     + Run the command line Oberon:

       skl-oberon <Module>.<Command>


   o Run the compiler

     The shell command 'skl-skl-oc' will invoke the compiler on one
     or more modules.

     Example:

       cd ${SKL_DIR}/system

       skl-skl-oc SKLModules.Mod Files.Mod Texts.Mod
       LMSO SKL Compiler  TWH 2020.11.16
       SKLModules.Mod compiling  Modules   30332 bytes code       44 bytes data  (mem 4003K/3105K)
       Files.Mod compiling  Files   14984 bytes code        0 bytes data  (mem 3582K/3045K)
       Texts.Mod compiling  Texts   43736 bytes code       44 bytes data  (mem 3935K/3121K)


   o Execute a sample module:

     As stated, the 'skl-oberon' function loads the Oberon system and
     executes the Oberon Command provided on the command line.

     This sample will compile a module that prints prime numbers under
     100,000, and then executes its main exported function.

        cd ${SKL_DIR}/system
        skl-skl-oc Prime.Mod
        skl-oberon Prime.Execute

     Other 'test' modules that can be quickly examined begin with
     'CT', if interested.


   o If your program terminates due to a programming error (assert
     failure, halt, NIL pointer dereference, type guard failure,
     etc.), the system will print a backtrace of the stack to the
     console and exit with a non-zero return code.


   o More formal documentation on the system implementation and usage
     will be forthcoming.


   o Notes on code formatting

     The code formatting is presently inconsistent because this is a
     compendium of projects that go back at least 25 years; this will
     be remedied in time.  A set of coding guidelines will be
     produced.
